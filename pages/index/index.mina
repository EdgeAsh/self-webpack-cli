<!--index.wxml-->
<!-- <view class="container">
  <view class="userinfo">
    <button wx:if="{{!hasUserInfo && canIUse}}" open-type="getUserInfo" bindgetuserinfo="getUserInfo"> 获取头像昵称 </button>
    <block wx:else>
      <image bindtap="bindViewTap" class="userinfo-avatar" src="{{userInfo.avatarUrl}}" background-size="cover"></image>
      <text class="userinfo-nickname">{{userInfo.nickName}}</text>
    </block>
  </view>
  <view class="usermotto">
    <text class="user-motto">{{motto}}</text>
  </view>
</view> -->
<template lang='pug'>
view.container
  view.userinfo(bindtap='bindViewTap')
    text.userinfo-nickname {{userInfo.nickName}}
    image.userinfo-avatar(src="{{userInfo.avatarUrl}}", background-size="cover")
  view.usermotto
    text.user-motto {{motto}}
</template>

<style lang='sass'>
  /**index.wxss**/
  .userinfo 
    display: flex
    flex-direction: column
    align-items: center

  .userinfo-avatar 
    width: 128rpx
    height: 128rpx
    margin: 20rpx
    border-radius: 50%

  .userinfo-nickname 
    color: #aaa

  .usermotto 
    margin-top: 200px
</style>

<script>
const { regeneratorRuntime, util } = global
//index.js
//获取应用实例
const app = getApp()

Page({
  data: {
    motto: 'Hello World',
    userInfo: {
      nickName: "baiban1994"
    },
    hasUserInfo: false,
    canIUse: wx.canIUse('button.open-type.getUserInfo')
  },
  //事件处理函数
  bindViewTap() {
    wx.navigateTo({
      url: '../logs/logs'
    })
  },
  async onLoad() {
    console.log('登录了')
    // if (app.globalData.userInfo) {
    //   this.setData({
    //     userInfo: app.globalData.userInfo,
    //     hasUserInfo: true
    //   })
    // } else if (this.data.canIUse){
    //   // 由于 getUserInfo 是网络请求，可能会在 Page.onLoad 之后才返回
    //   // 所以此处加入 callback 以防止这种情况
    //   app.userInfoReadyCallback = res => {
    //     this.setData({
    //       userInfo: res.userInfo,
    //       hasUserInfo: true
    //     })
    //   }
    // } else {
      // 在没有 open-type=getUserInfo 版本的兼容处理
      await wx.getUserInfoAsync({
        success: res => {
          console.log(res.userInfo, '用户信息')
          app.globalData.userInfo = res.userInfo
          this.setData({
            userInfo: res.userInfo,
            hasUserInfo: true
          })
        }
      })
    // }
  },
  // async onLoad: function() {
  //   console.log('onLoad')
  //   var that = this 
  //   // 调用应用实例的方法获取全局数据
  //   const userInfo = await app.getUserInfo(function(userInfo){
  //     // 更新数据
  //     this.setData({
  //       userInfo: userInfo
  //     })
  //   })
  // }
  getUserInfo: function(e) {
    console.log('用户')
    app.globalData.userInfo = e.detail.userInfo
    this.setData({
      userInfo: e.detail.userInfo,
      hasUserInfo: true
    })
  }
})

</script>